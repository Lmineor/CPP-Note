#include <iostream>

using namespace std;
/*
函数原型，也称函数声明
用处:
1、用来告诉给编译器提示参数列表、防止出现不必要的错误
2、强制类型转换
*/
void err_msg(); //函数声明

int main()
{
   int flag = -1;
   if(flag<0) err_msg();
   return 0;





/*
形式参数（dummy argument）
函数调用处的参数为实际参数（real argument）
*/

int i
j = fun_1(i) // i为实际参数

//指针用作函数参数
/*
指针用作函数参数时具有一下优点
1、对于用户自定义的较复杂数据类型（如结构体、类等），使用指针能够节省时间和空间，因只需在栈上复制指针的副本（只占4个字节）
而不是整个数据类型的副本
2、可以从子函数内改变子函数以外的参量
*/

//但是指针使用不方便，因此出现“引用” ，引用只有C++有
//宏与函数的区别：
//宏节省时间但占用空间；函数节省空间但增加时间开销

/*
------------------------引用----------------------------------
“别名其表，指针其实”
引用用途：
1、用作函数参数，用于传递大型对象，必要时可从函数内部修改函数外部的实参
2、从函数返回的引用可用作等式左值
3、函数返回对象的引用时，不必复制对象副本，便于实现级联调用
关键词符号“&”,
其内存中存放了变量的地址
*/
int i = 5;
int &r = i; //引用r被初始化为整型变量i的别名
//此时r，i都为5
r = 9;
//此时r， i 都为9

} 


void err_msg()
{
   cout<<"Error!"<<endl;
}

